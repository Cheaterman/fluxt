stages:
    - build
    - test
    - release
    - deploy

variables:
    DOCKER_TLS_CERTDIR: '/certs'
    TAG: $CI_COMMIT_REF_SLUG
    SSH_PRIVATE_KEY:
        description: 'Private SSH key for a given deployment environment.'
    TARGET_USER:
        description: 'User name for a given deployment environment.'
    TARGET_HOST:
        description: 'Host for a given deployment environment.'
    TARGET_DIRECTORY:
        description: 'Absolute path to target folder for a given deployment environment.'
    STAGING_URL:
        description: 'URL where the staging deployment can be seen.'
    PRODUCTION_URL:
        description: 'URL where the production deployment can be seen.'

services:
    - docker:dind

build:
    stage: build
    image: docker
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker compose build
        - docker compose push
    only:
        refs:
            - staging
            - main

test:
    stage: test
    image: docker
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker compose pull backend
        - docker compose up -d db
        - |
            echo '
            pip install -r requirements-test.txt &&
            flake8 && \
            mypy && \
            COVERAGE_FILE=/tmp/coverage \
            pytest -o cache_dir=/tmp/cache
            ' | docker compose run --rm backend sh

release:
    stage: release
    image: docker
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker compose pull
        - docker tag $CI_REGISTRY_IMAGE/backend:$TAG $CI_REGISTRY_IMAGE/backend:latest
        - docker tag $CI_REGISTRY_IMAGE/frontend:$TAG $CI_REGISTRY_IMAGE/frontend:latest
        - TAG=latest docker compose push
    only:
        refs:
            - main

deploy:staging:
    stage: deploy
    image: alpine
    script:
        - apk update && apk add openssh rsync
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | ssh-add -
        - mkdir ~/.ssh
        - chmod 700 ~/.ssh
        - |
            scp -o StrictHostKeyChecking=accept-new \
            docker-compose.yml \
            nginx.conf.template \
            "${TARGET_USER}@${TARGET_HOST}:${TARGET_DIRECTORY}/"
        - |
            ssh "${TARGET_USER}@${TARGET_HOST}" \
            -oStrictHostKeyChecking=accept-new \
            "
            cd \"${TARGET_DIRECTORY}\" &&
            docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
            export TAG=$TAG CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE &&
            docker compose pull &&
            rm -rf ~/.docker &&
            docker compose \\
                up \\
                --renew-anon-volumes \\
                --no-deps \\
                --detach \\
            &&
            echo 'flask db upgrade' \\
            | docker compose run --rm backend sh &&
            echo '
            pip install -r requirements-test.txt &&
            COVERAGE_FILE=/tmp/coverage \\
            pytest -o cache_dir=/tmp/cache
            ' | docker compose run --rm backend sh &&
            docker image prune -f
            "
    environment:
        name: staging
        url: $STAGING_URL
    only:
        refs:
            - staging
            - main

deploy:production:
    stage: deploy
    image: alpine
    variables:
        TAG: 'latest'
    script:
        - apk update && apk add openssh rsync
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | ssh-add -
        - mkdir ~/.ssh
        - chmod 700 ~/.ssh
        - |
            scp -o StrictHostKeyChecking=accept-new \
            docker-compose.yml \
            nginx.conf.template \
            "${TARGET_USER}@${TARGET_HOST}:${TARGET_DIRECTORY}/"
        - |
            ssh "${TARGET_USER}@${TARGET_HOST}" \
            -oStrictHostKeyChecking=accept-new \
            "
            cd \"${TARGET_DIRECTORY}\" &&
            docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
            export TAG=$TAG CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE &&
            docker compose pull &&
            rm -rf ~/.docker &&
            docker compose \\
                up \\
                --renew-anon-volumes \\
                --no-deps \\
                --detach \\
            &&
            echo 'flask db upgrade' \\
            | docker compose run --rm backend sh &&
            docker image prune -f
            "
    environment:
        name: production
        url: $PRODUCTION_URL
    when: manual
    only:
        refs:
            - main
